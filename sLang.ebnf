program = function {variable} {function};

variable = variableDeclaration [ASSIGN_OPERATOR expression] SEMICOLON;
function = FUNCTION (DATATYPE | VOID) NAME BRACKET_OPEN [{DATATYPE NAME COMMA} DATATYPE NAME] BRACKET_CLOSE block;

variableDeclaration = DATATYPE NAME;

block = BLOCK_OPEN {statement} BLOCK_CLOSE;

statement = [block | structure] | [(expressionStatement | return | variableDeclaration) SEMICOLON];
expressionStatement = functioncall | assignment | unOpExpression;

return = RETURN [expression];

structure = whileStruct | ifStruct;
whileStruct = WHILE BRACKET_OPEN expression BRACKET_CLOSE statement;
ifStruct = IF BRACKET_OPEN expression BRACKET_CLOSE statement [ELSE statement];

functioncall = NAME BRACKET_OPEN [{expression COMMA} expression] BRACKET_CLOSE;

assignment = ((variableDeclaration ASSIGN_OPERATOR) | (NAME (ASSIGN_OPERATOR | SHORT_ASSIGN_OPERATOR) expression;

unOpExpression = NAME UN_OPERATOR;
arithmeticExpression = arithmeticExpression [BIN_OPERATOR arithmeticExpression] | expression;
expression = functioncall | unOpExpression | NAME | NUMBER | character | arithmeticExpression;

character = APOSTROPHE NAME APOSTROPHE;